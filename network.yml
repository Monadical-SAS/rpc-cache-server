AWSTemplateFormatVersion: '2010-09-09'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: "AWS::Region"}
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: "AWS::Region"}
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: {Ref: "AWS::Region"}
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.3.0/24"
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  ReaderLoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to the public facing load balancer
        VpcId: !Ref 'VPC'
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1

  ReaderLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups: [!Ref 'ReaderLoadBalancerSecurityGroup']

  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: "no-op"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  ReaderLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ReaderLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'ReaderLoadBalancer'
      Port: 80
      Protocol: HTTP

  WriterECSCluster:
    Type: AWS::ECS::Cluster

  WriterECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Writer ECS containers
      VpcId: !Ref 'VPC'

  ReaderECSCluster:
    Type: AWS::ECS::Cluster

  ReaderECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Reader ECS containers
      VpcId: !Ref 'VPC'

  ECSVPCRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Allows ECS tasks to call AWS services on your behalf."
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
      RoleName: "ecs-vpc-role"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Provides access to other AWS service resources that are required to run Amazon ECS tasks"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      RoleName: "ecs-vpc-role"

Outputs:
  WriterClusterName:
    Description: The name of the Writer ECS cluster
    Value: !Ref 'WriterECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'WriterClusterName' ] ]
  ReaderClusterName:
    Description: The name of the Reader ECS cluster
    Value: !Ref 'ReaderECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ReaderClusterName' ] ]
  ReaderLoadBalancerUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'ReaderLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ReaderLoadBalancerUrl' ] ]
  ReaderLoadBalancerListener:
    Description: The ARN of the Reader load balancer's Listener
    Value: !Ref ReaderLoadBalancerListener
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ReaderLoadBalancerListener' ] ]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSVPCRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskExecutionRole' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnet1:
    Description: Public subnet 1
    Value: !Ref 'PublicSubnet1'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet1' ] ]
  PublicSubnet2:
    Description: Public subnet 2
    Value: !Ref 'PublicSubnet2'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet2' ] ]
  PublicSubnet3:
    Description: Public subnet 3
    Value: !Ref 'PublicSubnet3'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet3' ] ]
  WriterECSSecurityGroup:
    Description: A security group used to allow Writer ECS containers to receive traffic
    Value: !Ref 'WriterECSSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'WriterECSSecurityGroup' ] ]
  ReaderECSSecurityGroup:
    Description: A security group used to allow Reader ECS containers to receive traffic
    Value: !Ref 'ReaderECSSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ReaderECSSecurityGroup' ] ]
